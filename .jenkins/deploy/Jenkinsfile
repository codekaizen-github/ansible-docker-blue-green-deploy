pipeline {
    agent none
    environment {
        SHOULD_RUN = false
        TAG_NAME = ''
        GHCR_REGISTRY = 'ghcr.io'
        GHCR_USER = 'AndrewJDawes'
        // GHCR_REPOSITORY = 'your-github-username/your-image-name' # Actually, get this dynamically from Jenkins env vars
        GHCR_CREDENTIALS_ID = 'jenkins-github-gchr-pat-token-andrewjdawes' // Jenkins Credentials for GitHub PAT
    }
    stages {
        stage('Define vars') {
            agent any
            when {
                expression {
                    // Only run if the GIT_BRANCH is a tag (refs/tags/<tag-name>)
                    env.GIT_BRANCH.startsWith('refs/tags/')
                }
            }
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    env.TAG_NAME = env.GIT_BRANCH.replace('refs/tags/', '')
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                    env.SHOULD_RUN = true
                }
            }
        }

        stage('Dump all env vars') {
            agent any
            steps {
                sh "env"
            }
        }

        stage('Build and Push Images') {
            parallel {
                stage('Build for amd64') {
                    agent { label 'amd64' }
                    when {
                        expression {
                            // Only run this stage if it's a tag
                            env.SHOULD_RUN == true
                        }
                    }
                    steps {
                        script {
                            withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh """
                                echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin

                                # docker buildx create --use --name multiarch-builder || true
                                # docker buildx inspect multiarch-builder --bootstrap
                                # docker buildx build --platform linux/amd64 \
                                #    -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64 \
                                #    --push .
                                """
                            }
                        }
                    }
                }
                stage('Build for arm64') {
                    agent { label 'arm64' }
                    when {
                        expression {
                            // Only run this stage if it's a tag
                            env.SHOULD_RUN == true
                        }
                    }
                    steps {
                        script {
                            withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh """
                                echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin

                                # docker buildx create --use --name multiarch-builder || true
                                # docker buildx inspect multiarch-builder --bootstrap
                                # docker buildx build --platform linux/arm64 \
                                #    -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64 \
                                #    --push .
                                """
                            }
                        }
                    }
                }
            }
        }

        // stage('Create and Push Manifest') {
        //     agent { label 'amd64' } // Or use any node with Docker CLI
        //     when {
        //         expression {
        //             // Only run this stage if it's a tag
        //             env.GIT_BRANCH.startsWith('refs/tags/')
        //         }
        //     }
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: GHCR_CREDENTIALS_ID,
        //                                              usernameVariable: 'GHCR_USER',
        //                                              passwordVariable: 'GHCR_PAT')]) {
        //                 sh """
        //                 echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin

        //                 docker manifest create ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME} \
        //                     ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64 \
        //                     ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64

        //                 docker manifest push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}
        //                 """
        //             }
        //         }
        //     }
        // }
    }
}
