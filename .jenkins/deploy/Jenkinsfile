pipeline {
    agent none
    environment {
        GHCR_REGISTRY = 'ghcr.io'
        GHCR_USER = 'ASDFASDF' // This can technically be anything. The GitHub PAT is what actually authenticates to GHCR.
        // GHCR_REPOSITORY = 'your-github-username/your-image-name' # Actually, get this dynamically from Jenkins env vars
        GHCR_CREDENTIALS_ID = 'jenkins-github-ghcr-pat-token-andrewjdawes' // Jenkins Credentials ID for a GitHub PAT Token with read/write access to GHCR packages
    }
    stages {
        stage('Dump env using a sh command') {
            agent any
            steps {
                sh 'env'
            }
        }
        stage('Define vars') {
            agent any
            when {
                env.GIT_BRANCH.startsWith('refs/tags/')
            }
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    // Use the Git ref name for the image name
                    env.TAG_NAME = env.GIT_BRANCH.replace('refs/tags/', '')
                    // env.TAG_NAME = env.GIT_COMMIT.take(7)
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                    env.SHOULD_RUN = true
                }
            }
        }
        stage('Build and Push Images') {
            when {
                expression { env.SHOULD_RUN }
            }
            parallel {
                stage('Build for amd64') {
                    agent { label 'docker && amd64' }
                    steps {
                        script {
                            withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh '''
                                echo $GHCR_PAT | wc -m
                                echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin

                                # docker buildx create --use --name multiarch-builder || true
                                # docker buildx inspect multiarch-builder --bootstrap
                                # docker buildx build --platform linux/amd64 \
                                #    -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64 \
                                #    --push .
                                # Use docker build instead of docker buildx
                                docker build -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64 .
                                docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64
                                '''
                            }
                        }
                    }
                }
                stage('Build for arm64') {
                    agent { label 'docker && arm64' }
                    steps {
                        script {
                            withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh '''
                                echo $GHCR_PAT | wc -m
                                echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin

                                # docker buildx create --use --name multiarch-builder || true
                                # docker buildx inspect multiarch-builder --bootstrap
                                # docker buildx build --platform linux/arm64 \
                                #    -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64 \
                                #    --push .
                                # Use docker build instead of docker buildx
                                docker build -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64 .
                                docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('Create and Push Manifest') {
            when {
                expression { env.SHOULD_RUN }
            }
            agent { label 'docker' } // Or use any node with Docker CLI
            steps {
                script {
                    withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                        variable: 'GHCR_PAT')]) {
                        sh '''
                        echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin

                        docker manifest create ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64 \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64

                        docker manifest annotate ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-amd64 --os linux --arch amd64

                        docker manifest annotate ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}-arm64 --os linux --arch arm64

                        docker manifest push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${TAG_NAME}
                        '''
                    }
                }
            }
        }
    }
}
